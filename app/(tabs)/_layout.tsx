import { Route, router, Tabs, usePathname } from 'expo-router';
import { ReactNode, useEffect, useMemo } from 'react';
import { TouchableOpacity, View } from 'react-native';
import Animated, {
  useAnimatedStyle,
  useSharedValue,
  withTiming,
} from 'react-native-reanimated';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Path, Svg } from 'react-native-svg';

const HIDDEN_TAB_ROUTES = [] as string[];

const TABS = [
  {
    name: 'Dashboard',
    route: '/dashboard',
    icon: ({ color }: { color: string }) => (
      <Svg width="34" height="28" viewBox="0 0 34 28" fill="none">
        <Path
          d="M12.7941 3.5H8.36081C7.70741 3.5 7.38072 3.5 7.13115 3.62716C6.91163 3.73901 6.73315 3.91749 6.6213 4.13701C6.49414 4.38657 6.49414 4.71327 6.49414 5.36667V9.8C6.49414 10.4534 6.49414 10.7801 6.6213 11.0297C6.73315 11.2492 6.91163 11.4277 7.13115 11.5395C7.38072 11.6667 7.70741 11.6667 8.36081 11.6667H12.7941C13.4475 11.6667 13.7742 11.6667 14.0238 11.5395C14.2433 11.4277 14.4218 11.2492 14.5336 11.0297C14.6608 10.7801 14.6608 10.4534 14.6608 9.8V5.36667C14.6608 4.71327 14.6608 4.38657 14.5336 4.13701C14.4218 3.91749 14.2433 3.73901 14.0238 3.62716C13.7742 3.5 13.4475 3.5 12.7941 3.5Z"
          fill={color}
        />
        <Path
          d="M25.6275 3.5H21.1941C20.5407 3.5 20.214 3.5 19.9645 3.62716C19.745 3.73901 19.5665 3.91749 19.4546 4.13701C19.3275 4.38657 19.3275 4.71327 19.3275 5.36667V9.8C19.3275 10.4534 19.3275 10.7801 19.4546 11.0297C19.5665 11.2492 19.745 11.4277 19.9645 11.5395C20.214 11.6667 20.5407 11.6667 21.1941 11.6667H25.6275C26.2809 11.6667 26.6076 11.6667 26.8571 11.5395C27.0767 11.4277 27.2551 11.2492 27.367 11.0297C27.4941 10.7801 27.4941 10.4534 27.4941 9.8V5.36667C27.4941 4.71327 27.4941 4.38657 27.367 4.13701C27.2551 3.91749 27.0767 3.73901 26.8571 3.62716C26.6076 3.5 26.2809 3.5 25.6275 3.5Z"
          fill={color}
        />
        <Path
          d="M25.6275 16.3333H21.1941C20.5407 16.3333 20.214 16.3333 19.9645 16.4605C19.745 16.5723 19.5665 16.7508 19.4546 16.9703C19.3275 17.2199 19.3275 17.5466 19.3275 18.2V22.6333C19.3275 23.2867 19.3275 23.6134 19.4546 23.863C19.5665 24.0825 19.745 24.261 19.9645 24.3728C20.214 24.5 20.5407 24.5 21.1941 24.5H25.6275C26.2809 24.5 26.6076 24.5 26.8571 24.3728C27.0767 24.261 27.2551 24.0825 27.367 23.863C27.4941 23.6134 27.4941 23.2867 27.4941 22.6333V18.2C27.4941 17.5466 27.4941 17.2199 27.367 16.9703C27.2551 16.7508 27.0767 16.5723 26.8571 16.4605C26.6076 16.3333 26.2809 16.3333 25.6275 16.3333Z"
          fill={color}
        />
        <Path
          d="M12.7941 16.3333H8.36081C7.70741 16.3333 7.38072 16.3333 7.13115 16.4605C6.91163 16.5723 6.73315 16.7508 6.6213 16.9703C6.49414 17.2199 6.49414 17.5466 6.49414 18.2V22.6333C6.49414 23.2867 6.49414 23.6134 6.6213 23.863C6.73315 24.0825 6.91163 24.261 7.13115 24.3728C7.38072 24.5 7.70741 24.5 8.36081 24.5H12.7941C13.4475 24.5 13.7742 24.5 14.0238 24.3728C14.2433 24.261 14.4218 24.0825 14.5336 23.863C14.6608 23.6134 14.6608 23.2867 14.6608 22.6333V18.2C14.6608 17.5466 14.6608 17.2199 14.5336 16.9703C14.4218 16.7508 14.2433 16.5723 14.0238 16.4605C13.7742 16.3333 13.4475 16.3333 12.7941 16.3333Z"
          fill={color}
        />
        <Path
          d="M12.7941 3.5H8.36081C7.70741 3.5 7.38072 3.5 7.13115 3.62716C6.91163 3.73901 6.73315 3.91749 6.6213 4.13701C6.49414 4.38657 6.49414 4.71327 6.49414 5.36667V9.8C6.49414 10.4534 6.49414 10.7801 6.6213 11.0297C6.73315 11.2492 6.91163 11.4277 7.13115 11.5395C7.38072 11.6667 7.70741 11.6667 8.36081 11.6667H12.7941C13.4475 11.6667 13.7742 11.6667 14.0238 11.5395C14.2433 11.4277 14.4218 11.2492 14.5336 11.0297C14.6608 10.7801 14.6608 10.4534 14.6608 9.8V5.36667C14.6608 4.71327 14.6608 4.38657 14.5336 4.13701C14.4218 3.91749 14.2433 3.73901 14.0238 3.62716C13.7742 3.5 13.4475 3.5 12.7941 3.5Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <Path
          d="M25.6275 3.5H21.1941C20.5407 3.5 20.214 3.5 19.9645 3.62716C19.745 3.73901 19.5665 3.91749 19.4546 4.13701C19.3275 4.38657 19.3275 4.71327 19.3275 5.36667V9.8C19.3275 10.4534 19.3275 10.7801 19.4546 11.0297C19.5665 11.2492 19.745 11.4277 19.9645 11.5395C20.214 11.6667 20.5407 11.6667 21.1941 11.6667H25.6275C26.2809 11.6667 26.6076 11.6667 26.8571 11.5395C27.0767 11.4277 27.2551 11.2492 27.367 11.0297C27.4941 10.7801 27.4941 10.4534 27.4941 9.8V5.36667C27.4941 4.71327 27.4941 4.38657 27.367 4.13701C27.2551 3.91749 27.0767 3.73901 26.8571 3.62716C26.6076 3.5 26.2809 3.5 25.6275 3.5Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <Path
          d="M25.6275 16.3333H21.1941C20.5407 16.3333 20.214 16.3333 19.9645 16.4605C19.745 16.5723 19.5665 16.7508 19.4546 16.9703C19.3275 17.2199 19.3275 17.5466 19.3275 18.2V22.6333C19.3275 23.2867 19.3275 23.6134 19.4546 23.863C19.5665 24.0825 19.745 24.261 19.9645 24.3728C20.214 24.5 20.5407 24.5 21.1941 24.5H25.6275C26.2809 24.5 26.6076 24.5 26.8571 24.3728C27.0767 24.261 27.2551 24.0825 27.367 23.863C27.4941 23.6134 27.4941 23.2867 27.4941 22.6333V18.2C27.4941 17.5466 27.4941 17.2199 27.367 16.9703C27.2551 16.7508 27.0767 16.5723 26.8571 16.4605C26.6076 16.3333 26.2809 16.3333 25.6275 16.3333Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <Path
          d="M12.7941 16.3333H8.36081C7.70741 16.3333 7.38072 16.3333 7.13115 16.4605C6.91163 16.5723 6.73315 16.7508 6.6213 16.9703C6.49414 17.2199 6.49414 17.5466 6.49414 18.2V22.6333C6.49414 23.2867 6.49414 23.6134 6.6213 23.863C6.73315 24.0825 6.91163 24.261 7.13115 24.3728C7.38072 24.5 7.70741 24.5 8.36081 24.5H12.7941C13.4475 24.5 13.7742 24.5 14.0238 24.3728C14.2433 24.261 14.4218 24.0825 14.5336 23.863C14.6608 23.6134 14.6608 23.2867 14.6608 22.6333V18.2C14.6608 17.5466 14.6608 17.2199 14.5336 16.9703C14.4218 16.7508 14.2433 16.5723 14.0238 16.4605C13.7742 16.3333 13.4475 16.3333 12.7941 16.3333Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </Svg>
    ),
  },
  {
    name: 'AI',
    route: '/ai',
    icon: ({ color }: { color: string }) => (
      <Svg width="34" height="28" viewBox="0 0 34 28" fill="none">
        <Path
          d="M16.6608 2.33325L18.1792 8.40691C18.4755 9.59208 18.6237 10.1847 18.9322 10.6669C19.2051 11.0934 19.5674 11.4556 19.9939 11.7285C20.4761 12.0371 21.0687 12.1852 22.2538 12.4815L28.3275 13.9999L22.2538 15.5183C21.0687 15.8146 20.4761 15.9628 19.9939 16.2713C19.5674 16.5442 19.2051 16.9065 18.9322 17.333C18.6237 17.8152 18.4755 18.4078 18.1792 19.5929L16.6608 25.6666L15.1424 19.5929C14.8461 18.4078 14.698 17.8152 14.3894 17.333C14.1165 16.9065 13.7543 16.5442 13.3277 16.2713C12.8455 15.9628 12.253 15.8146 11.0678 15.5183L4.99414 13.9999L11.0678 12.4815C12.253 12.1852 12.8455 12.0371 13.3277 11.7285C13.7543 11.4556 14.1165 11.0934 14.3894 10.6669C14.698 10.1847 14.8461 9.59207 15.1424 8.40691L16.6608 2.33325Z"
          fill={color}
        />
        <Path
          d="M16.6608 2.33325L18.1792 8.40691C18.4755 9.59208 18.6237 10.1847 18.9322 10.6669C19.2051 11.0934 19.5674 11.4556 19.9939 11.7285C20.4761 12.0371 21.0687 12.1852 22.2538 12.4815L28.3275 13.9999L22.2538 15.5183C21.0687 15.8146 20.4761 15.9628 19.9939 16.2713C19.5674 16.5442 19.2051 16.9065 18.9322 17.333C18.6237 17.8152 18.4755 18.4078 18.1792 19.5929L16.6608 25.6666L15.1424 19.5929C14.8461 18.4078 14.698 17.8152 14.3894 17.333C14.1165 16.9065 13.7543 16.5442 13.3277 16.2713C12.8455 15.9628 12.253 15.8146 11.0678 15.5183L4.99414 13.9999L11.0678 12.4815C12.253 12.1852 12.8455 12.0371 13.3277 11.7285C13.7543 11.4556 14.1165 11.0934 14.3894 10.6669C14.698 10.1847 14.8461 9.59207 15.1424 8.40691L16.6608 2.33325Z"
          fill={color}
        />
        <Path
          d="M16.6608 2.33325L18.1792 8.40691C18.4755 9.59208 18.6237 10.1847 18.9322 10.6669C19.2051 11.0934 19.5674 11.4556 19.9939 11.7285C20.4761 12.0371 21.0687 12.1852 22.2538 12.4815L28.3275 13.9999L22.2538 15.5183C21.0687 15.8146 20.4761 15.9628 19.9939 16.2713C19.5674 16.5442 19.2051 16.9065 18.9322 17.333C18.6237 17.8152 18.4755 18.4078 18.1792 19.5929L16.6608 25.6666L15.1424 19.5929C14.8461 18.4078 14.698 17.8152 14.3894 17.333C14.1165 16.9065 13.7543 16.5442 13.3277 16.2713C12.8455 15.9628 12.253 15.8146 11.0678 15.5183L4.99414 13.9999L11.0678 12.4815C12.253 12.1852 12.8455 12.0371 13.3277 11.7285C13.7543 11.4556 14.1165 11.0934 14.3894 10.6669C14.698 10.1847 14.8461 9.59207 15.1424 8.40691L16.6608 2.33325Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <Path
          d="M16.6608 2.33325L18.1792 8.40691C18.4755 9.59208 18.6237 10.1847 18.9322 10.6669C19.2051 11.0934 19.5674 11.4556 19.9939 11.7285C20.4761 12.0371 21.0687 12.1852 22.2538 12.4815L28.3275 13.9999L22.2538 15.5183C21.0687 15.8146 20.4761 15.9628 19.9939 16.2713C19.5674 16.5442 19.2051 16.9065 18.9322 17.333C18.6237 17.8152 18.4755 18.4078 18.1792 19.5929L16.6608 25.6666L15.1424 19.5929C14.8461 18.4078 14.698 17.8152 14.3894 17.333C14.1165 16.9065 13.7543 16.5442 13.3277 16.2713C12.8455 15.9628 12.253 15.8146 11.0678 15.5183L4.99414 13.9999L11.0678 12.4815C12.253 12.1852 12.8455 12.0371 13.3277 11.7285C13.7543 11.4556 14.1165 11.0934 14.3894 10.6669C14.698 10.1847 14.8461 9.59207 15.1424 8.40691L16.6608 2.33325Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </Svg>
    ),
  },
  {
    name: 'Menu',
    route: '/menu',
    icon: ({ color }: { color: string }) => (
      <Svg width="34" height="28" viewBox="0 0 34 28" fill="none">
        <Path
          d="M22.4746 3.5C24.2938 3.5 25.7684 4.97479 25.7686 6.79395V21.2061C25.7683 23.0251 24.2937 24.5 22.4746 24.5H12.1807C10.3617 24.4999 8.88697 23.025 8.88672 21.2061V6.79395C8.88687 4.97488 10.3616 3.50015 12.1807 3.5H22.4746ZM18.9453 18C18.3931 18.0001 17.9453 18.4478 17.9453 19C17.9453 19.5522 18.3931 19.9999 18.9453 20H22.4453C22.9976 20 23.4453 19.5523 23.4453 19C23.4453 18.4477 22.9976 18 22.4453 18H18.9453ZM11.9453 17.9121C11.3931 17.9122 10.9453 18.3599 10.9453 18.9121C10.9455 19.4642 11.3932 19.912 11.9453 19.9121H15.4453C15.9975 19.9121 16.4451 19.4642 16.4453 18.9121C16.4453 18.3598 15.9976 17.9121 15.4453 17.9121H11.9453ZM11.9453 13C11.3931 13.0001 10.9453 13.4478 10.9453 14C10.9453 14.5522 11.3931 14.9999 11.9453 15H15.4453C15.9976 15 16.4453 14.5523 16.4453 14C16.4453 13.4477 15.9976 13 15.4453 13H11.9453ZM18.9453 13C18.3931 13.0001 17.9453 13.4478 17.9453 14C17.9453 14.5522 18.3931 14.9999 18.9453 15H22.4453C22.9976 15 23.4453 14.5523 23.4453 14C23.4453 13.4477 22.9976 13 22.4453 13H18.9453ZM11.9453 8C11.3931 8.00012 10.9453 8.44779 10.9453 9C10.9453 9.55221 11.3931 9.99988 11.9453 10H15.4453C15.9976 10 16.4453 9.55228 16.4453 9C16.4453 8.44772 15.9976 8 15.4453 8H11.9453ZM18.9453 8C18.3931 8.00012 17.9453 8.44779 17.9453 9C17.9453 9.55221 18.3931 9.99988 18.9453 10H22.4453C22.9976 10 23.4453 9.55228 23.4453 9C23.4453 8.44772 22.9976 8 22.4453 8H18.9453Z"
          fill={color}
        />
      </Svg>
    ),
  },
  {
    name: 'Settings',
    route: '/settings',
    icon: ({ color }: { color: string }) => (
      <Svg width="34" height="28" viewBox="0 0 34 28" fill="none">
        <Path
          d="M17.0002 17.5C13.3017 17.5 10.0127 19.2857 7.91881 22.057C7.46814 22.6534 7.2428 22.9516 7.25018 23.3547C7.25587 23.666 7.45141 24.0589 7.69641 24.2511C8.01354 24.5 8.453 24.5 9.33192 24.5H24.6684C25.5473 24.5 25.9868 24.5 26.3039 24.2511C26.5489 24.0589 26.7444 23.666 26.7501 23.3547C26.7575 22.9516 26.5322 22.6534 26.0815 22.057C23.9876 19.2857 20.6986 17.5 17.0002 17.5Z"
          fill={color}
        />
        <Path
          d="M17.0002 14C19.8996 14 22.2502 11.6495 22.2502 8.75C22.2502 5.8505 19.8996 3.5 17.0002 3.5C14.1007 3.5 11.7502 5.8505 11.7502 8.75C11.7502 11.6495 14.1007 14 17.0002 14Z"
          fill={color}
        />
        <Path
          d="M17.0002 17.5C13.3017 17.5 10.0127 19.2857 7.91881 22.057C7.46814 22.6534 7.2428 22.9516 7.25018 23.3547C7.25587 23.666 7.45141 24.0589 7.69641 24.2511C8.01354 24.5 8.453 24.5 9.33192 24.5H24.6684C25.5473 24.5 25.9868 24.5 26.3039 24.2511C26.5489 24.0589 26.7444 23.666 26.7501 23.3547C26.7575 22.9516 26.5322 22.6534 26.0815 22.057C23.9876 19.2857 20.6986 17.5 17.0002 17.5Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <Path
          d="M17.0002 14C19.8996 14 22.2502 11.6495 22.2502 8.75C22.2502 5.8505 19.8996 3.5 17.0002 3.5C14.1007 3.5 11.7502 5.8505 11.7502 8.75C11.7502 11.6495 14.1007 14 17.0002 14Z"
          stroke={color}
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </Svg>
    ),
  },
];

const TabItem = ({
  tab,
}: {
  tab: {
    name: string;
    route: Route;
    icon: ReactNode;
  };
}) => {
  const pathname = usePathname();
  const isActive =
    (pathname === '/' && tab.route === '/dashboard') ||
    pathname.includes(tab.route);
  const color = isActive ? '#9CDF03' : '#61656C';

  // Background animation value
  const scale = useSharedValue(isActive ? 1 : 0);

  useEffect(() => {
    scale.value = withTiming(isActive ? 1 : 0, { duration: 200 });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isActive]);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scale.value }],
    opacity: scale.value,
  }));

  return (
    <TouchableOpacity
      key={tab.route}
      onPress={() => router.replace(tab.route as Route)}
      className="items-center">
      <View className="items-center">
        <Animated.View
          style={[
            {
              position: 'absolute',
              width: 48,
              height: 48,
              zIndex: -1,
            },
            animatedStyle,
          ]}
        />
        <View className="p-2">
          {
            // @ts-ignore
            tab.icon({ color })
          }
        </View>
      </View>
    </TouchableOpacity>
  );
};

export default function TabLayout() {
  const pathname = usePathname();

  // Check if tab bar should be hidden
  const hideTabBar = useMemo(() => {
    return HIDDEN_TAB_ROUTES.some((route) => pathname.startsWith(route));
  }, [pathname]);

  const translateY = useSharedValue(0);
  const opacity = useSharedValue(1);

  // Animate when `hideTabBar` changes
  useEffect(() => {
    translateY.value = withTiming(hideTabBar ? 100 : 0, { duration: 300 });
    opacity.value = withTiming(hideTabBar ? 0 : 1, { duration: 300 });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [hideTabBar]);

  const animatedTabStyle = useAnimatedStyle(() => ({
    transform: [{ translateY: translateY.value }],
    opacity: opacity.value,
  }));

  return (
    <View className="flex-1 bg-[#0C0E12]">
      <Tabs
        initialRouteName="dashboard"
        screenOptions={{
          headerShown: false,
          tabBarStyle: { display: 'none' },
          animation: 'fade',
        }}>
        <Tabs.Screen name="dashboard" options={{ href: '/dashboard' }} />
        <Tabs.Screen name="ai" options={{ href: '/ai' }} />
        <Tabs.Screen name="menu" options={{ href: '/menu' }} />
        <Tabs.Screen name="settings/index" options={{ href: '/settings' }} />
      </Tabs>
      <Animated.View
        style={[animatedTabStyle]}
        className="absolute bottom-0 left-0 right-0 z-50">
        <SafeAreaView
          edges={['bottom']}
          className="flex-row items-center justify-around border-t border-[#3C3C435C] bg-[#13161B] py-3">
          {TABS.map((tab, index) => (
            // @ts-ignore
            <TabItem key={index} tab={tab} />
          ))}
        </SafeAreaView>
      </Animated.View>
    </View>
  );
}
